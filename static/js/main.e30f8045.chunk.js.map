{"version":3,"sources":["logic.ts","components/Button.tsx","components/Display.tsx","components/Calculator.tsx","index.tsx"],"names":["operators","add","subtract","multiply","divide","numbers","one","two","three","four","five","six","seven","eight","nine","zero","commands","decimal","equals","isOperator","value","operations","a","b","operateCalculation","operator","buffer","typing","command","resolveTypedValue","includes","Error","typed","result","parseFloat","isNaN","validateTextAsNumber","Button","props","style","gridArea","id","className","onClick","text","Display","content","buttons","Object","entries","Calculator","useState","setCommands","useMemo","error","message","map","key","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oRAGMA,EAAY,CAChBC,IAAK,IACLC,SAAU,IACVC,SAAU,IACVC,OAAQ,KAGJC,EAAU,CACdC,IAAK,EACLC,IAAK,EACLC,MAAO,EACPC,KAAM,EACNC,KAAM,EACNC,IAAK,EACLC,MAAO,EACPC,MAAO,EACPC,KAAM,EACNC,KAAM,GAGKC,EAAQ,uCAChBhB,GACAK,GAFgB,IAGnBY,QA1Bc,IA2BdC,OA1Ba,MAmCTC,EAAa,SAACC,GAAD,OACjBA,KAASpB,GAELqB,EAAqD,CACzDpB,IAAK,SAACqB,EAAGC,GAAJ,OAAUD,EAAIC,GACnBrB,SAAU,SAACoB,EAAGC,GAAJ,OAAUD,EAAIC,GACxBpB,SAAU,SAACmB,EAAGC,GAAJ,OAAUD,EAAIC,GACxBnB,OAAQ,SAACkB,EAAGC,GAAJ,OAAUD,EAAIC,IAGjB,SAASC,EAAmBR,GACjC,IADsD,EAClDS,EAAoC,KACpCC,EAAS,EACTC,EAAS,GAHyC,cAKhCX,GALgC,IAKtD,2BAAgC,CAAC,IAAtBY,EAAqB,QAC9B,GAAaA,KAjBkDvB,EAkB7DsB,GAAUtB,EAAQuB,QAIpB,GAAgB,YAAZA,EAUY,aAAZA,GAAqC,KAAXD,EAK1BR,EAAWS,IAERF,IAAUC,GACbE,IAGFJ,EAAWJ,EAAWO,IAIR,WAAZA,IACFC,IACAJ,EAAW,MAhBXE,EAAS,QAXX,CACE,GAAIA,EAAOG,SA1DD,KA2DR,MAAM,IAAIC,MAAM,iCAGlBJ,GA9DU,MA8CwC,8BA2CtD,OAAOA,GAAM,UAAOD,GAEpB,SAASG,IACP,IAAMG,EAAQL,EAMlB,SAA8BP,GAC5B,IAAMa,EAASC,WAAWd,GAE1B,GAAIe,MAAMF,GACR,MAAM,IAAIF,MAAJ,0BAA6BX,IAGrC,OAAOa,EAbkBG,CAAqBT,GAAU,EACtDD,EAASD,EAAWA,EAASC,EAAQM,GAASA,EAC9CL,EAAS,I,iBCpFE,SAASU,EAAOC,GAC7B,OACE,wBACEC,MAAO,CAAEC,SAAUF,EAAMG,IACzBC,UAAU,SACVC,QAASL,EAAMK,QAHjB,SAKGL,EAAMM,O,YCVN,SAASC,EAAQP,GACtB,OAAO,qBAAKI,UAAU,UAAf,SAA0BJ,EAAMQ,UCFzC,IAAMC,EAAUC,OAAOC,QAAQjC,GAEhB,SAASkC,IAAc,IAAD,EACHC,mBAAoB,IADjB,mBAC5BnC,EAD4B,KAClBoC,EADkB,KAG7BnB,EAASoB,mBAAQ,WACrB,IACE,OAAO7B,EAAmBR,GAC1B,MAAOsC,GACP,MAAM,UAAN,OAAiBA,EAAMC,YAExB,CAACvC,IAEJ,OACE,sBAAK0B,UAAU,aAAf,UACE,cAAC,EAAD,CAASI,QAASb,IAClB,cAAC,EAAD,CAAQQ,GAAG,QAAQG,KAAK,KAAKD,QAAS,kBAAMS,EAAY,OAEvDL,EAAQS,KAAI,mCAAEC,EAAF,KAAOb,EAAP,YACX,cAAC,EAAD,CAEEH,GAAIgB,EACJb,KAAMA,EACND,QAAS,kBAAMS,EAAY,GAAD,mBAAKpC,GAAL,CAAeyC,OAHpCA,SCrBfC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e30f8045.chunk.js","sourcesContent":["const decimal = '.';\nconst equals = '=';\n\nconst operators = {\n  add: '+',\n  subtract: '-',\n  multiply: '*',\n  divide: '/',\n};\n\nconst numbers = {\n  one: 1,\n  two: 2,\n  three: 3,\n  four: 4,\n  five: 5,\n  six: 6,\n  seven: 7,\n  eight: 8,\n  nine: 9,\n  zero: 0,\n};\n\nexport const commands = {\n  ...operators,\n  ...numbers,\n  decimal,\n  equals,\n};\n\nexport type Command = keyof typeof commands;\ntype OperatorFunction = (a: number, b: number) => number;\ntype OperatorList = keyof typeof operators;\ntype NumberList = keyof typeof numbers;\n\nconst isNumber = (value: Command): value is NumberList => value in numbers;\nconst isOperator = (value: Command): value is OperatorList =>\n  value in operators;\n\nconst operations: Record<OperatorList, OperatorFunction> = {\n  add: (a, b) => a + b,\n  subtract: (a, b) => a - b,\n  multiply: (a, b) => a * b,\n  divide: (a, b) => a / b,\n};\n\nexport function operateCalculation(commands: Command[]) {\n  let operator: OperatorFunction | null = null;\n  let buffer = 0;\n  let typing = '';\n\n  for (const command of commands) {\n    if (isNumber(command)) {\n      typing += numbers[command];\n      continue;\n    }\n\n    if (command === 'decimal') {\n      if (typing.includes(decimal)) {\n        throw new Error(\"Can't have two decimal points\");\n      }\n\n      typing += decimal;\n      continue;\n    }\n\n    // special case for negative numbers\n    if (command === 'subtract' && typing === '') {\n      typing = '-';\n      continue;\n    }\n\n    if (isOperator(command)) {\n      // this will be false if we just pressed equals\n      if (!buffer || typing) {\n        resolveTypedValue();\n      }\n\n      operator = operations[command];\n      continue;\n    }\n\n    if (command === 'equals') {\n      resolveTypedValue();\n      operator = null;\n      continue;\n    }\n  }\n\n  return typing || `${buffer}`;\n\n  function resolveTypedValue() {\n    const typed = typing ? validateTextAsNumber(typing) : 0;\n    buffer = operator ? operator(buffer, typed) : typed;\n    typing = '';\n  }\n}\n\nfunction validateTextAsNumber(value: string) {\n  const result = parseFloat(value);\n\n  if (isNaN(result)) {\n    throw new Error(`Invalid number: ${value}`);\n  }\n\n  return result;\n}\n","import './Button.css';\nimport React from 'react';\n\n// type HtmlButtonProps = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\ntype ButtonProps = {\n  id: string;\n  text: string | number;\n  onClick: () => void;\n};\n\nexport default function Button(props: ButtonProps) {\n  return (\n    <button\n      style={{ gridArea: props.id }}\n      className=\"Button\"\n      onClick={props.onClick}\n    >\n      {props.text}\n    </button>\n  );\n}\n","import React from 'react';\nimport './Display.css';\n\ninterface DisplayProps {\n  content: string;\n}\n\nexport function Display(props: DisplayProps) {\n  return <pre className=\"Display\">{props.content}</pre>;\n}\n","import React, { useMemo, useState } from 'react';\nimport { Command, commands, operateCalculation } from '../logic';\nimport Button from './Button';\nimport './Calculator.css';\nimport { Display } from './Display';\n\nconst buttons = Object.entries(commands) as [Command, string | number][];\n\nexport default function Calculator() {\n  const [commands, setCommands] = useState<Command[]>([]);\n\n  const result = useMemo(() => {\n    try {\n      return operateCalculation(commands);\n    } catch (error) {\n      return `ERROR: ${error.message}`;\n    }\n  }, [commands]);\n\n  return (\n    <div className=\"Calculator\">\n      <Display content={result} />\n      <Button id=\"reset\" text=\"CE\" onClick={() => setCommands([])}></Button>\n\n      {buttons.map(([key, text]) => (\n        <Button\n          key={key}\n          id={key}\n          text={text}\n          onClick={() => setCommands([...commands, key])}\n        ></Button>\n      ))}\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Calculator from './components/Calculator';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Calculator />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}